// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// users views
//
// Command:
// $ goa gen github.com/andmorefine/goa2-sample/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa"
)

// StoredUserCollection is the viewed result type that is projected based on a
// view.
type StoredUserCollection struct {
	// Type to project
	Projected StoredUserCollectionView
	// View to render
	View string
}

// StoredUser is the viewed result type that is projected based on a view.
type StoredUser struct {
	// Type to project
	Projected *StoredUserView
	// View to render
	View string
}

// StoredUserCollectionView is a type that runs validations on a projected type.
type StoredUserCollectionView []*StoredUserView

// StoredUserView is a type that runs validations on a projected type.
type StoredUserView struct {
	// ID is the unique id of the user.
	ID *int64
	// Name of user
	Name *string
	// Email of user
	Email *string
}

// ValidateStoredUserCollection runs the validations defined on the viewed
// result type StoredUserCollection.
func ValidateStoredUserCollection(result StoredUserCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredUserCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateStoredUser runs the validations defined on the viewed result type
// StoredUser.
func ValidateStoredUser(result *StoredUser) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredUserView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateStoredUserCollectionView runs the validations defined on
// StoredUserCollectionView using the "default" view.
func ValidateStoredUserCollectionView(result StoredUserCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredUserView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredUserView runs the validations defined on StoredUserView using
// the "default" view.
func ValidateStoredUserView(result *StoredUserView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 30, false))
		}
	}
	return
}
