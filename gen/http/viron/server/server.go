// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// viron HTTP server
//
// Command:
// $ goa gen github.com/andmorefine/buddha/design

package server

import (
	"context"
	"net/http"
	"regexp"

	viron "github.com/andmorefine/buddha/gen/viron"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
	"goa.design/plugins/cors"
)

// Server lists the viron service endpoint HTTP handlers.
type Server struct {
	Mounts    []*MountPoint
	Authtype  http.Handler
	VironMenu http.Handler
	CORS      http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the viron service endpoints.
func New(
	e *viron.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Authtype", "GET", "/viron_authtype"},
			{"VironMenu", "GET", "/viron"},
			{"CORS", "OPTIONS", "/viron_authtype"},
			{"CORS", "OPTIONS", "/viron"},
			{"CORS", "OPTIONS", "/js/*filepath"},
			{"../../submodule/viron/public/js/", "GET", "/js/*filepath"},
		},
		Authtype:  NewAuthtypeHandler(e.Authtype, mux, dec, enc, eh),
		VironMenu: NewVironMenuHandler(e.VironMenu, mux, dec, enc, eh),
		CORS:      NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "viron" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Authtype = m(s.Authtype)
	s.VironMenu = m(s.VironMenu)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the viron endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountAuthtypeHandler(mux, h.Authtype)
	MountVironMenuHandler(mux, h.VironMenu)
	MountCORSHandler(mux, h.CORS)
	MountSubmoduleVironPublicJs(mux, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, "../../submodule/viron/public/js/")
	}))
}

// MountAuthtypeHandler configures the mux to serve the "viron" service
// "authtype" endpoint.
func MountAuthtypeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleVironOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/viron_authtype", f)
}

// NewAuthtypeHandler creates a HTTP handler which loads the HTTP request and
// calls the "viron" service "authtype" endpoint.
func NewAuthtypeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		encodeResponse = EncodeAuthtypeResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "authtype")
		ctx = context.WithValue(ctx, goa.ServiceKey, "viron")

		res, err := endpoint(ctx, nil)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountVironMenuHandler configures the mux to serve the "viron" service
// "viron_menu" endpoint.
func MountVironMenuHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleVironOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/viron", f)
}

// NewVironMenuHandler creates a HTTP handler which loads the HTTP request and
// calls the "viron" service "viron_menu" endpoint.
func NewVironMenuHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		encodeResponse = EncodeVironMenuResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "viron_menu")
		ctx = context.WithValue(ctx, goa.ServiceKey, "viron")

		res, err := endpoint(ctx, nil)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountSubmoduleVironPublicJs configures the mux to serve GET request made to
// "/js/*filepath".
func MountSubmoduleVironPublicJs(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/js/*filepath", handleVironOrigin(h).ServeHTTP)
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service viron.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = handleVironOrigin(h)
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("OPTIONS", "/viron_authtype", f)
	mux.Handle("OPTIONS", "/viron", f)
	mux.Handle("OPTIONS", "/js/*filepath", f)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// handleVironOrigin applies the CORS response headers corresponding to the
// origin for the service viron.
func handleVironOrigin(h http.Handler) http.Handler {
	spec0 := regexp.MustCompile(".*localhost.*")
	origHndlr := h.(http.HandlerFunc)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			origHndlr(w, r)
			return
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "authorization, content-type")
			}
			origHndlr(w, r)
			return
		}
		origHndlr(w, r)
		return
	})
}
