// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// stats HTTP server types
//
// Command:
// $ goa gen github.com/tonouchi510/goa2-sample/design

package server

import (
	statsviews "github.com/tonouchi510/goa2-sample/gen/stats/views"
)

// UserNumberResponseBody is the type of the "stats" service "user_number"
// endpoint HTTP response body.
type UserNumberResponseBody struct {
	// グラフデータ
	Data []*DataResponseBody `form:"data" json:"data" xml:"data"`
	// X軸に使用するkey
	X string `form:"x" json:"x" xml:"x"`
	// Y軸に使用するkey
	Y string `form:"y" json:"y" xml:"y"`
	// ドットの大きさに使用するkey
	Size *string `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// ドットの色分けに使用するkey
	Color *string                     `form:"color,omitempty" json:"color,omitempty" xml:"color,omitempty"`
	Guide *StatsGuideTypeResponseBody `form:"guide" json:"guide" xml:"guide"`
}

// DataResponseBody is used to define fields on response body types.
type DataResponseBody struct {
	Key   *string     `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	Value interface{} `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// StatsGuideTypeResponseBody is used to define fields on response body types.
type StatsGuideTypeResponseBody struct {
	X *StatsLabelTypeResponseBody `form:"x,omitempty" json:"x,omitempty" xml:"x,omitempty"`
	Y *StatsLabelTypeResponseBody `form:"y,omitempty" json:"y,omitempty" xml:"y,omitempty"`
}

// StatsLabelTypeResponseBody is used to define fields on response body types.
type StatsLabelTypeResponseBody struct {
	Label string `form:"label" json:"label" xml:"label"`
}

// NewUserNumberResponseBody builds the HTTP response body from the result of
// the "user_number" endpoint of the "stats" service.
func NewUserNumberResponseBody(res *statsviews.StatsuserView) *UserNumberResponseBody {
	body := &UserNumberResponseBody{
		X:     *res.X,
		Y:     *res.Y,
		Size:  res.Size,
		Color: res.Color,
	}
	if res.Data != nil {
		body.Data = make([]*DataResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = &DataResponseBody{
				Key: val.Key,
			}
			if val.Value != nil {
				body.Data[i].Value = *val.Value
			}
		}
	}
	if res.Guide != nil {
		body.Guide = marshalStatsGuideTypeViewToStatsGuideTypeResponseBody(res.Guide)
	}
	return body
}
