// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// users HTTP client types
//
// Command:
// $ goa gen github.com/tonouchi510/goa2-sample/design

package client

import (
	"unicode/utf8"

	users "github.com/tonouchi510/goa2-sample/gen/users"
	usersviews "github.com/tonouchi510/goa2-sample/gen/users/views"
	goa "goa.design/goa"
)

// AddRequestBody is the type of the "users" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Name of user
	Name string `form:"name" json:"name" xml:"name"`
	// Email of user
	Email string `form:"email" json:"email" xml:"email"`
}

// UpdateRequestBody is the type of the "users" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// Name of user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// ListResponseBody is the type of the "users" service "list" endpoint HTTP
// response body.
type ListResponseBody []*StoredUserResponse

// ShowResponseBody is the type of the "users" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// ID is the unique id of the user.
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// UpdateResponseBody is the type of the "users" service "update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	// ID is the unique id of the user.
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "users" service "show" endpoint
// HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing user
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// StoredUserResponse is used to define fields on response body types.
type StoredUserResponse struct {
	// ID is the unique id of the user.
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "users" service.
func NewAddRequestBody(p *users.User) *AddRequestBody {
	body := &AddRequestBody{
		Name:  p.Name,
		Email: p.Email,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "users" service.
func NewUpdateRequestBody(p *users.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Name:  p.Name,
		Email: p.Email,
	}
	return body
}

// NewListStoredUserCollectionOK builds a "users" service "list" endpoint
// result from a HTTP "OK" response.
func NewListStoredUserCollectionOK(body ListResponseBody) usersviews.StoredUserCollectionView {
	v := make([]*usersviews.StoredUserView, len(body))
	for i, val := range body {
		v[i] = &usersviews.StoredUserView{
			ID:    val.ID,
			Name:  val.Name,
			Email: val.Email,
		}
	}
	return v
}

// NewShowStoredUserOK builds a "users" service "show" endpoint result from a
// HTTP "OK" response.
func NewShowStoredUserOK(body *ShowResponseBody) *usersviews.StoredUserView {
	v := &usersviews.StoredUserView{
		ID:    body.ID,
		Name:  body.Name,
		Email: body.Email,
	}
	return v
}

// NewShowNotFound builds a users service show endpoint not_found error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *users.NotFound {
	v := &users.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}
	return v
}

// NewUpdateStoredUserOK builds a "users" service "update" endpoint result from
// a HTTP "OK" response.
func NewUpdateStoredUserOK(body *UpdateResponseBody) *usersviews.StoredUserView {
	v := &usersviews.StoredUserView{
		ID:    body.ID,
		Name:  body.Name,
		Email: body.Email,
	}
	return v
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_not_found_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateStoredUserResponse runs the validations defined on StoredUserResponse
func ValidateStoredUserResponse(body *StoredUserResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 30, false))
		}
	}
	return
}
