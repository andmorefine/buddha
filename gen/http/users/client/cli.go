// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// users HTTP client CLI support package
//
// Command:
// $ goa gen github.com/andmorefine/goa2-sample/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"
	"unicode/utf8"

	users "github.com/andmorefine/goa2-sample/gen/users"
	goa "goa.design/goa"
)

// BuildShowPayload builds the payload for the users show endpoint from CLI
// flags.
func BuildShowPayload(usersShowID string) (*users.ShowPayload, error) {
	var id int64
	{
		id, err = strconv.ParseInt(usersShowID, 10, 64)
	}
	payload := &users.ShowPayload{
		ID: id,
	}
	return payload, nil
}

// BuildAddPayload builds the payload for the users add endpoint from CLI flags.
func BuildAddPayload(usersAddBody string) (*users.User, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(usersAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Vel est eius dolorem delectus sit.\",\n      \"name\": \"hoge fuga\"\n   }'")
		}
		if utf8.RuneCountInString(body.Name) > 30 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 30, false))
		}
		if err != nil {
			return nil, err
		}
	}
	if err != nil {
		return nil, err
	}
	v := &users.User{
		Name:  body.Name,
		Email: body.Email,
	}
	return v, nil
}

// BuildUpdatePayload builds the payload for the users update endpoint from CLI
// flags.
func BuildUpdatePayload(usersUpdateBody string, usersUpdateID string) (*users.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(usersUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Voluptas dolore culpa.\",\n      \"name\": \"Minima ut porro velit nihil.\"\n   }'")
		}
	}
	var id int64
	{
		id, err = strconv.ParseInt(usersUpdateID, 10, 64)
	}
	if err != nil {
		return nil, err
	}
	v := &users.UpdatePayload{
		Name:  body.Name,
		Email: body.Email,
	}
	v.ID = id
	return v, nil
}

// BuildRemovePayload builds the payload for the users remove endpoint from CLI
// flags.
func BuildRemovePayload(usersRemoveID string) (*users.RemovePayload, error) {
	var id int64
	{
		id, err = strconv.ParseInt(usersRemoveID, 10, 64)
	}
	payload := &users.RemovePayload{
		ID: id,
	}
	return payload, nil
}
