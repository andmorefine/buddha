// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// secured HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tonouchi510/goa2-sample/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	secured "github.com/tonouchi510/goa2-sample/gen/secured"
	securedviews "github.com/tonouchi510/goa2-sample/gen/secured/views"
	goahttp "goa.design/goa/http"
)

// BuildSigninRequest instantiates a HTTP request object with method and path
// set to call the "secured" service "signin" endpoint
func (c *Client) BuildSigninRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SigninSecuredPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("secured", "signin", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSigninRequest returns an encoder for requests sent to the secured
// signin server.
func EncodeSigninRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*secured.SigninPayload)
		if !ok {
			return goahttp.ErrInvalidType("secured", "signin", "*secured.SigninPayload", v)
		}
		req.SetBasicAuth(p.Username, p.Password)
		return nil
	}
}

// DecodeSigninResponse returns a decoder for responses returned by the secured
// signin endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeSigninResponse may return the following errors:
//	- "unauthorized" (type secured.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeSigninResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SigninResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("secured", "signin", err)
			}
			p := NewSigninGoaJWTOK(&body)
			view := "default"
			vres := &securedviews.GoaJWT{p, view}
			if err = securedviews.ValidateGoaJWT(vres); err != nil {
				return nil, goahttp.ErrValidationError("secured", "signin", err)
			}
			res := secured.NewGoaJWT(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body SigninUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("secured", "signin", err)
			}
			return nil, NewSigninUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("secured", "signin", resp.StatusCode, string(body))
		}
	}
}
