// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// stats service
//
// Command:
// $ goa gen github.com/andmorefine/goa2-sample/design

package stats

import (
	"context"

	statsviews "github.com/andmorefine/goa2-sample/gen/stats/views"
)

// Stats describes stats information of this services
type Service interface {
	// Users Information
	UserNumber(context.Context) (res *Statsuser, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "stats"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"user_number"}

// Statsuser is the result type of the stats service user_number method.
type Statsuser struct {
	// グラフデータ
	Data []*Data
	// X軸に使用するkey
	X string
	// Y軸に使用するkey
	Y string
	// ドットの大きさに使用するkey
	Size *string
	// ドットの色分けに使用するkey
	Color *string
	Guide *StatsGuideType
}

type Data struct {
	Key   *string
	Value interface{}
}

type StatsGuideType struct {
	X *StatsLabelType
	Y *StatsLabelType
}

type StatsLabelType struct {
	Label string
}

// NewStatsuser initializes result type Statsuser from viewed result type
// Statsuser.
func NewStatsuser(vres *statsviews.Statsuser) *Statsuser {
	var res *Statsuser
	switch vres.View {
	case "default", "":
		res = newStatsuser(vres.Projected)
	}
	return res
}

// NewViewedStatsuser initializes viewed result type Statsuser from result type
// Statsuser using the given view.
func NewViewedStatsuser(res *Statsuser, view string) *statsviews.Statsuser {
	var vres *statsviews.Statsuser
	switch view {
	case "default", "":
		p := newStatsuserView(res)
		vres = &statsviews.Statsuser{p, "default"}
	}
	return vres
}

// newStatsuser converts projected type Statsuser to service type Statsuser.
func newStatsuser(vres *statsviews.StatsuserView) *Statsuser {
	res := &Statsuser{
		Size:  vres.Size,
		Color: vres.Color,
	}
	if vres.X != nil {
		res.X = *vres.X
	}
	if vres.Y != nil {
		res.Y = *vres.Y
	}
	if vres.Data != nil {
		res.Data = make([]*Data, len(vres.Data))
		for i, val := range vres.Data {
			res.Data[i] = &Data{
				Key: val.Key,
			}
			if val.Value != nil {
				res.Data[i].Value = *val.Value
			}
		}
	}
	if vres.Guide != nil {
		res.Guide = unmarshalStatsGuideTypeViewToStatsGuideType(vres.Guide)
	}
	return res
}

// newStatsuserView projects result type Statsuser into projected type
// StatsuserView using the "default" view.
func newStatsuserView(res *Statsuser) *statsviews.StatsuserView {
	vres := &statsviews.StatsuserView{
		X:     &res.X,
		Y:     &res.Y,
		Size:  res.Size,
		Color: res.Color,
	}
	if res.Data != nil {
		vres.Data = make([]*statsviews.DataView, len(res.Data))
		for i, val := range res.Data {
			vres.Data[i] = &statsviews.DataView{
				Key:   val.Key,
				Value: &val.Value,
			}
		}
	}
	if res.Guide != nil {
		vres.Guide = marshalStatsGuideTypeToStatsGuideTypeView(res.Guide)
	}
	return vres
}

// unmarshalStatsGuideTypeViewToStatsGuideType builds a value of type
// *StatsGuideType from a value of type *statsviews.StatsGuideTypeView.
func unmarshalStatsGuideTypeViewToStatsGuideType(v *statsviews.StatsGuideTypeView) *StatsGuideType {
	if v == nil {
		return nil
	}
	res := &StatsGuideType{}
	if v.X != nil {
		res.X = unmarshalStatsLabelTypeViewToStatsLabelType(v.X)
	}
	if v.Y != nil {
		res.Y = unmarshalStatsLabelTypeViewToStatsLabelType(v.Y)
	}

	return res
}

// unmarshalStatsLabelTypeViewToStatsLabelType builds a value of type
// *StatsLabelType from a value of type *statsviews.StatsLabelTypeView.
func unmarshalStatsLabelTypeViewToStatsLabelType(v *statsviews.StatsLabelTypeView) *StatsLabelType {
	if v == nil {
		return nil
	}
	res := &StatsLabelType{
		Label: *v.Label,
	}

	return res
}

// marshalStatsGuideTypeToStatsGuideTypeView builds a value of type
// *statsviews.StatsGuideTypeView from a value of type *StatsGuideType.
func marshalStatsGuideTypeToStatsGuideTypeView(v *StatsGuideType) *statsviews.StatsGuideTypeView {
	res := &statsviews.StatsGuideTypeView{}
	if v.X != nil {
		res.X = marshalStatsLabelTypeToStatsLabelTypeView(v.X)
	}
	if v.Y != nil {
		res.Y = marshalStatsLabelTypeToStatsLabelTypeView(v.Y)
	}

	return res
}

// marshalStatsLabelTypeToStatsLabelTypeView builds a value of type
// *statsviews.StatsLabelTypeView from a value of type *StatsLabelType.
func marshalStatsLabelTypeToStatsLabelTypeView(v *StatsLabelType) *statsviews.StatsLabelTypeView {
	if v == nil {
		return nil
	}
	res := &statsviews.StatsLabelTypeView{
		Label: &v.Label,
	}

	return res
}
