// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// stats views
//
// Command:
// $ goa gen github.com/tonouchi510/goa2-sample/design

package views

import (
	goa "goa.design/goa"
)

// Statsuser is the viewed result type that is projected based on a view.
type Statsuser struct {
	// Type to project
	Projected *StatsuserView
	// View to render
	View string
}

// StatsuserView is a type that runs validations on a projected type.
type StatsuserView struct {
	// グラフデータ
	Data []*DataView
	// X軸に使用するkey
	X *string
	// Y軸に使用するkey
	Y *string
	// ドットの大きさに使用するkey
	Size *string
	// ドットの色分けに使用するkey
	Color *string
	Guide *StatsGuideTypeView
}

// DataView is a type that runs validations on a projected type.
type DataView struct {
	Key   *string
	Value *interface{}
}

// StatsGuideTypeView is a type that runs validations on a projected type.
type StatsGuideTypeView struct {
	X *StatsLabelTypeView
	Y *StatsLabelTypeView
}

// StatsLabelTypeView is a type that runs validations on a projected type.
type StatsLabelTypeView struct {
	Label *string
}

// ValidateStatsuser runs the validations defined on the viewed result type
// Statsuser.
func ValidateStatsuser(result *Statsuser) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStatsuserView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateStatsuserView runs the validations defined on StatsuserView using
// the "default" view.
func ValidateStatsuserView(result *StatsuserView) (err error) {
	if result.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "result"))
	}
	if result.X == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("x", "result"))
	}
	if result.Y == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("y", "result"))
	}
	if result.Guide == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("guide", "result"))
	}
	if result.Guide != nil {
		if err2 := ValidateStatsGuideTypeView(result.Guide); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateDataView runs the validations defined on DataView.
func ValidateDataView(result *DataView) (err error) {

	return
}

// ValidateStatsGuideTypeView runs the validations defined on
// StatsGuideTypeView.
func ValidateStatsGuideTypeView(result *StatsGuideTypeView) (err error) {
	if result.X != nil {
		if err2 := ValidateStatsLabelTypeView(result.X); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Y != nil {
		if err2 := ValidateStatsLabelTypeView(result.Y); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStatsLabelTypeView runs the validations defined on
// StatsLabelTypeView.
func ValidateStatsLabelTypeView(result *StatsLabelTypeView) (err error) {

	return
}
