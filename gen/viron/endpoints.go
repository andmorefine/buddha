// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// viron endpoints
//
// Command:
// $ goa gen github.com/tonouchi510/goa2-sample/design

package viron

import (
	"context"

	goa "goa.design/goa"
)

// Endpoints wraps the "viron" service endpoints.
type Endpoints struct {
	Authtype  goa.Endpoint
	VironMenu goa.Endpoint
}

// NewEndpoints wraps the methods of the "viron" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Authtype:  NewAuthtypeEndpoint(s),
		VironMenu: NewVironMenuEndpoint(s),
	}
}

// Use applies the given middleware to all the "viron" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Authtype = m(e.Authtype)
	e.VironMenu = m(e.VironMenu)
}

// NewAuthtypeEndpoint returns an endpoint function that calls the method
// "authtype" of service "viron".
func NewAuthtypeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.Authtype(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedVironAuthtypeCollection(res, "default")
		return vres, nil
	}
}

// NewVironMenuEndpoint returns an endpoint function that calls the method
// "viron_menu" of service "viron".
func NewVironMenuEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.VironMenu(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedVironMenu(res, "default")
		return vres, nil
	}
}
