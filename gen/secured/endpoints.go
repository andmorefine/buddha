// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// secured endpoints
//
// Command:
// $ goa gen github.com/tonouchi510/goa2-sample/design

package secured

import (
	"context"

	goa "goa.design/goa"
	"goa.design/goa/security"
)

// Endpoints wraps the "secured" service endpoints.
type Endpoints struct {
	Signin goa.Endpoint
}

// NewEndpoints wraps the methods of the "secured" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Signin: NewSigninEndpoint(s, a.BasicAuth),
	}
}

// Use applies the given middleware to all the "secured" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Signin = m(e.Signin)
}

// NewSigninEndpoint returns an endpoint function that calls the method
// "signin" of service "secured".
func NewSigninEndpoint(s Service, authBasicFn security.AuthBasicFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SigninPayload)
		var err error
		sc := security.BasicScheme{
			Name: "basic",
		}
		ctx, err = authBasicFn(ctx, p.Username, p.Password, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.Signin(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedGoaJWT(res, "default")
		return vres, nil
	}
}
