// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// secured service
//
// Command:
// $ goa gen github.com/andmorefine/goa2-sample/design

package secured

import (
	"context"

	securedviews "github.com/andmorefine/goa2-sample/gen/secured/views"
	"goa.design/goa/security"
)

// The secured service exposes endpoints that require valid authorization
// credentials.
type Service interface {
	// Creates a valid JWT
	Signin(context.Context, *SigninPayload) (res *GoaJWT, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// BasicAuth implements the authorization logic for the Basic security scheme.
	BasicAuth(ctx context.Context, user, pass string, schema *security.BasicScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "secured"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"signin"}

// Credentials used to authenticate to retrieve JWT token
type SigninPayload struct {
	// Username used to perform signin
	Username string
	// Password used to perform signin
	Password string
}

// GoaJWT is the result type of the secured service signin method.
type GoaJWT struct {
	// New Jwt token
	Authorization string
}

// Credentials are invalid
type Unauthorized string

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Credentials are invalid"
}

// ErrorName returns "unauthorized".
func (e Unauthorized) ErrorName() string {
	return "unauthorized"
}

// NewGoaJWT initializes result type GoaJWT from viewed result type GoaJWT.
func NewGoaJWT(vres *securedviews.GoaJWT) *GoaJWT {
	var res *GoaJWT
	switch vres.View {
	case "default", "":
		res = newGoaJWT(vres.Projected)
	}
	return res
}

// NewViewedGoaJWT initializes viewed result type GoaJWT from result type
// GoaJWT using the given view.
func NewViewedGoaJWT(res *GoaJWT, view string) *securedviews.GoaJWT {
	var vres *securedviews.GoaJWT
	switch view {
	case "default", "":
		p := newGoaJWTView(res)
		vres = &securedviews.GoaJWT{p, "default"}
	}
	return vres
}

// newGoaJWT converts projected type GoaJWT to service type GoaJWT.
func newGoaJWT(vres *securedviews.GoaJWTView) *GoaJWT {
	res := &GoaJWT{}
	if vres.Authorization != nil {
		res.Authorization = *vres.Authorization
	}
	return res
}

// newGoaJWTView projects result type GoaJWT into projected type GoaJWTView
// using the "default" view.
func newGoaJWTView(res *GoaJWT) *securedviews.GoaJWTView {
	vres := &securedviews.GoaJWTView{
		Authorization: &res.Authorization,
	}
	return vres
}
